/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uas_softcom1;


import java.awt.Desktop;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
/**
 *
 * @author wawan
 */
public class FrameTrain extends javax.swing.JDialog {

    private static final int INPUT_NEURONS = 16;
    private static final int HIDDEN_NEURONS = 10;
    private static final int OUTPUT_NEURONS = 7;

    private static final double LEARNING_RATE = 0.2;
    private static final int TRAINING_REPS = 6000;

    private static final double momentum = 0.0001;
    
    // bobot pada hidden layer
    private static double wih[][] = new double[INPUT_NEURONS + 1][HIDDEN_NEURONS];

    // bobot pada output layer
    private static double who[][] = new double[HIDDEN_NEURONS + 1][OUTPUT_NEURONS];

    private static double inputs[] = new double[INPUT_NEURONS];
    private static double hidden[] = new double[HIDDEN_NEURONS];
    private static double target[] = new double[OUTPUT_NEURONS];
    private static double actual[] = new double[OUTPUT_NEURONS];

    // galat
    private static double erro[] = new double[OUTPUT_NEURONS];
    private static double errh[] = new double[HIDDEN_NEURONS];

    private static final int MAX_SAMPLES = 101;

    private static double trainInput[][] = new double[5000][INPUT_NEURONS];
    
    private static int trainOutput[][] = new int[5000][OUTPUT_NEURONS];
    /**
     * Creates new form FrameTrain
     */
    public FrameTrain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jTextFieldTrainInput = new javax.swing.JTextField();
        jTextFieldTrainOutput = new javax.swing.JTextField();
        jButtonTrain = new javax.swing.JButton();
        jButtonTrainInput = new javax.swing.JButton();
        jButtonTrainOutput = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonPengujian = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel4.setText("Learning Rate :");

        jTextFieldTrainInput.setEditable(false);

        jTextFieldTrainOutput.setEditable(false);

        jButtonTrain.setText("Train");
        jButtonTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrainActionPerformed(evt);
            }
        });

        jButtonTrainInput.setText("Train Input");
        jButtonTrainInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrainInputActionPerformed(evt);
            }
        });

        jButtonTrainOutput.setText("Train Output");
        jButtonTrainOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrainOutputActionPerformed(evt);
            }
        });

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setText("Train");

        jButtonPengujian.setBackground(new java.awt.Color(0, 0, 0));
        jButtonPengujian.setText("Pengujian");
        jButtonPengujian.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButtonTrainOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                    .addComponent(jButtonTrainInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldTrainInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldTrainOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonPengujian, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTrain, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonTrainInput))
                    .addComponent(jTextFieldTrainInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTrainOutput)
                    .addComponent(jTextFieldTrainOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonTrain)
                .addGap(30, 30, 30)
                .addComponent(jButtonPengujian)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrainActionPerformed
        // TODO add your handling code here:
        NN();
        FramePengujian pengujian = new FramePengujian();
        pengujian.who = who;
        pengujian.wih = wih;
        pengujian.setVisible(true);
        jButtonPengujian.setEnabled(true);
    }//GEN-LAST:event_jButtonTrainActionPerformed

    private void jButtonTrainInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrainInputActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();
        jfc.showOpenDialog(null);
        File file = jfc.getSelectedFile();
        String dir = file.getAbsolutePath();
        String data;
        String values[] = null;
        try{
            Scanner inputStream = new Scanner(file);
            int j=0;
            while(inputStream.hasNext()){
                data= inputStream.next();
                values = data.split(",");
                for(int i=0; i<values.length; i++){
                    trainInput[j][i] = Double.parseDouble(values[i]);
                    System.out.printf(trainInput[j][i]+"\t");
                }
                System.out.println("");
                j++;
//                System.out.println(values[0]+"\t"+values[1]+"\t"+values[2]);
            }
            inputStream.close();
        }catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        //This prints out the working directory
        jTextFieldTrainInput.setText(System.getProperty("user.dir"));
//        trainInput = new double[][];
        
    }//GEN-LAST:event_jButtonTrainInputActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c) & ! evt.isAltDown()){
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jButtonTrainOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrainOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonTrainOutputActionPerformed

    private static void assignRandomWeights() {
      for (int inp = 0; inp <= INPUT_NEURONS; inp++) {
        for (int hid = 0; hid < HIDDEN_NEURONS; hid++) {
          // random bobot
          wih[inp][hid] = new Random().nextDouble()-0.5;
        }
      }


      for (int hid = 0; hid <= HIDDEN_NEURONS; hid++) {
        for (int out = 0; out < OUTPUT_NEURONS; out++) {
          who[hid][out] = new Random().nextDouble()-0.5;
        }
      }

    }
    
    private static void feedForward() {
      double sum = 0;
      // hitung input ke hidden

      for (int hid = 0; hid < HIDDEN_NEURONS; hid++) {
        sum = 0.0;
        for (int inp = 0; inp < INPUT_NEURONS; inp++) {
          sum = sum + inputs[inp] * wih[inp][hid];
        }
        sum = sum + 1 * wih[INPUT_NEURONS][hid]; // bias
        hidden[hid] = sigmoid(sum);
      }

      // hitung hidden ke output
      for (int out = 0; out < OUTPUT_NEURONS; out++) {
        sum = 0.0;
        for (int hid = 0; hid < HIDDEN_NEURONS; hid++) {
          sum = sum + hidden[hid] * who[hid][out];
        }
        sum = sum + 1 * who[HIDDEN_NEURONS][out];
        actual[out] = sigmoid(sum);
      }
      return;

    }
    
    private static double sigmoid(final double val) {
      return (1.0 / (1.0 + Math.exp(-val)));
    }
    
    private static double sigmoidDerivative(final double val) {
      return (val * (1.0 - val));
    }
    
    private static void backPropagate() {
      // hitung galat dari out terhadap actual
      for (int out = 0; out < OUTPUT_NEURONS; out++) {
        erro[out] = (target[out] - actual[out]) *
          sigmoidDerivative(actual[out]);
      }

      // hitung galat dari hidden ke input
      for (int hid = 0; hid < HIDDEN_NEURONS; hid++) {
        errh[hid] = 0.0;
        for (int out = 0; out < OUTPUT_NEURONS; out++) {
          errh[hid] = errh[hid] + erro[out]*who[hid][out];
        }
        errh[hid] = errh[hid] * sigmoidDerivative(hidden[hid]);
      }

      // update bobot output layer
      for (int out = 0; out < OUTPUT_NEURONS; out++) {
        for (int hid = 0; hid < HIDDEN_NEURONS; hid++) {
          who[hid][out] = who[hid][out] + LEARNING_RATE * erro[out] * hidden[hid];
        }
        //bias
        who[HIDDEN_NEURONS][out] = who[HIDDEN_NEURONS][out] + 
        LEARNING_RATE * erro[out] * 1;
      }

      //update bobot di hidden layer
      for (int hid = 0; hid < HIDDEN_NEURONS; hid++) {
        for (int inp = 0; inp < INPUT_NEURONS; inp++) {

          wih[inp][hid] += LEARNING_RATE * errh[hid] *inputs[inp];
        }
        // bias
        wih[INPUT_NEURONS][hid] += LEARNING_RATE * errh[hid];
      }
      return;
    }
    
    private static void NN() {
      int sample = 0;

      assignRandomWeights();

      //train NN

      for (int epoch = 0; epoch < TRAINING_REPS; epoch++) {
        sample++;

        if (sample == MAX_SAMPLES) {
          sample = 0;
        }

        for (int i = 0; i < INPUT_NEURONS; i++) {
          inputs[i] = trainInput[sample][i];
        }

        for (int i = 0; i < OUTPUT_NEURONS; i++) {
          target[i] = trainOutput[sample][i];
        }

        feedForward();

        backPropagate();
      } // training selesai

      // uji coba     


//      inputs = new double[] {1,0,0,1,0,0,1,1,1,1,0,0,0.5,0,0,1,1};
//
//      feedForward();
//      System.out.print("\n OUTPUT: ");
//
//      for (int j = 0; j < OUTPUT_NEURONS; j++) {
//        System.out.printf("%2.2f \t", actual[j]);
//      }
//
//      testNetworkTraining();
//      getTrainingStats();

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameTrain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameTrain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameTrain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameTrain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameTrain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPengujian;
    private javax.swing.JButton jButtonTrain;
    private javax.swing.JButton jButtonTrainInput;
    private javax.swing.JButton jButtonTrainOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextFieldTrainInput;
    private javax.swing.JTextField jTextFieldTrainOutput;
    // End of variables declaration//GEN-END:variables
}
